{"version":3,"file":"static/js/861.aca9a90a.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","redux/filter/selectors.js","components/Filter/Filter.styted.js","components/Filter/Filter.jsx","../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactsList.styled.js","components/ContactList/ContactsList.jsx","components/pages/Contacts.jsx"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","export const selectFilter = state => state.filter;","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  margin: 20px auto 30px auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nexport const Label = styled.label`\n  color: #000000;\n  font-size: 20px;\n  margin-bottom: 5px;\n`;\n\nexport const Input = styled.input`\n  width: 400px;\n  padding: 10px;\n  margin: 0 auto;\n  border-radius: 4px;\n  border: 3px solid #f08080;\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { selectFilter } from 'redux/filter/selectors';\nimport { changeFilter } from 'redux/filter/filterSlice';\nimport { Wrapper, Input, Label } from './Filter.styted';\n\n\nexport const Filter = () => {\n  const value = useSelector(selectFilter); \n  const dispatch = useDispatch(); \n\n  const onChange = event => {\n    const normalizedValue = event.target.value.toLowerCase();\n\n    dispatch(changeFilter(normalizedValue));\n  };\n\n  return (\n    <Wrapper>\n      <Label>Find contacts by name</Label>\n      <Input type=\"text\" value={value} onChange={onChange} />\n    </Wrapper>\n  );\n};\n","// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import { createSelector } from '@reduxjs/toolkit';\nimport { selectFilter } from 'redux/filter/selectors';\n\n\nexport const selectLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  width: 400px;\n  padding: 12px;\n  background-color: rgba(0, 0, 0, 0.6);\n  border: 3px solid #f08080;\n  border-radius: 4px;\n  margin: 0 auto;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 16px;\n  color: #f08080;\n  font-size: 20px;\n`;\n\nexport const Input = styled.input`\n  color: #171718;\n  padding: 8px 12px;\n  font: inherit;\n  cursor: pointer;\n`;\n\nexport const Button = styled.button`\n  padding: 8px 12px;\n  font: inherit;\n  cursor: pointer;\n  border-radius: 4px;\n  border: 3px solid #f08080;\n  color: #f08080;\n  font-size: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  &:hover {\n    background-color: #b9bcd3;\n  }\n`;","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Filter } from 'components/Filter/Filter';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContacts } from 'redux/contacts/operations';\nimport { Form, Label, Input, Button } from './ContactForm.styled';\n\n\nconst nameInputId = nanoid();\nconst numberInputId = nanoid();\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const isInContacts = contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    if (isInContacts) {\n      alert(`${name} вже в контактах☝️`);\n      return;\n    }\n\n    dispatch(addContacts({ name, number }));\n\n    setName('');\n    setNumber('');\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  return (\n    <>\n      <Form onSubmit={handleSubmit}>\n        <Label htmlFor={nameInputId}>\n          Name\n          <Input\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Введіть ім'я\"\n            value={name}\n            onChange={handleChange}\n            pattern=\"^[^\\d]+$\"\n            title=\"Ім'я має містити лише літери, апострофи, дефіси та відступи\"\n            required\n          />\n        </Label>\n        <Label htmlFor={numberInputId}>\n          Number\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"Введіть номер телефону\"\n            value={number}\n            onChange={handleChange}\n            pattern=\"\\+\\d{12}\"\n            minlength=\"13\"\n            maxlength=\"13\"\n            title=\"Номер телефону має починатися з +, а потім 12 цифр\"\n            required\n          />\n        </Label>\n\n        <Button type=\"submit\">\n          Add contact{' '}\n        </Button>\n      </Form>\n      <Filter />\n    </>\n  );\n};","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  width: 400px;\n  padding: 12px;\n  border-radius: 4px;\n  background-color: rgba(0, 0, 0, 0.6);\n  border: 3px solid #f08080;\n  margin: 0 auto;\n`;\n\nexport const Item = styled.li`\n  background-color: #ffffff;\n  border: 3px solid #f08080;\n  padding: 10px;\n  border-radius: 4px;\n  margin-bottom: 5px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  font-size: 20px;\n`;\n\nexport const Button = styled.button`\n  padding: 4px 8px;\n  font: inherit;\n  cursor: pointer;\n  border-radius: 4px 8px;\n  border: 3px solid #f08080;\n  display: flex;\n  align-items: center;\n\n  &:hover {\n    background-color: #b9bcd3;\n  }\n`;\n\n\n\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\nimport { useDispatch } from 'react-redux';\nimport { deleteContacts } from 'redux/contacts/operations';\nimport { List, Item, Button } from './ContactsList.styled';\n\n\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <List>\n      {contacts.map(contact => (\n        <Item key={contact.id}>\n          {contact.name + ' : ' + contact.number}\n          {\n            <Button\n              type=\"button\"\n              name=\"delete\"\n              onClick={() => dispatch(deleteContacts(contact.id))}\n            >\n              delete\n            </Button>\n          }\n        </Item>\n      ))}\n    </List>\n  );\n};","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactForm } from '../ContactForm/ContactForm';\nimport { ContactList } from '../ContactList/ContactsList';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectLoading } from 'redux/contacts/selectors';\nimport { Loader } from '../Loader/Loader';\n\nexport default function Tasks() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts()); \n  }, [dispatch]);\n\n  return (\n    <>\n      <title>Your contacts</title>\n      <ContactForm /> \n      <div>{isLoading && <Loader />}</div>{' '}\n      <ContactList /> \n    </>\n  );\n}"],"names":["nanoid","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","selectFilter","state","filter","Wrapper","styled","_templateObject","_taggedTemplateLiteral","Label","_templateObject2","Input","_templateObject3","Filter","value","useSelector","dispatch","useDispatch","_jsxs","children","_jsx","type","onChange","event","normalizedValue","target","toLowerCase","changeFilter","NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","i","createCacheKeyComparator","cache","equals","entry","get","key","put","getEntries","clear","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","name","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","selectLoading","contacts","isLoading","selectContacts","items","selectVisibleContacts","contact","includes","Form","Button","_templateObject4","nameInputId","numberInputId","ContactForm","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","number","setNumber","handleChange","_event$currentTarget","currentTarget","_Fragment","onSubmit","preventDefault","some","alert","addContacts","htmlFor","placeholder","pattern","title","required","minlength","maxlength","List","Item","ContactList","onClick","deleteContacts","Tasks","useEffect","fetchContacts","Loader"],"sourceRoot":""}